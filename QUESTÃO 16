#include <stdio.h>
#include <stdlib.h>
#include <time.h> 
// A biblioteca "time.h" é responsável por medir o tempo de execução.

int comparacao(const void *a, const void *b){

  if (*(float*)a > *(float*)b) { 
      return 1;
   } else if (*(float*)a < *(float*)b) { 
      return -1;
   } else { 
      return 0;
   }
}


void ordena(float *p, int n, int (*comparacao)(const void *x, const void *y)){
  float aux;
  for(int i = 0; i < n; i++){
    for(int j = i+1; j < n; j++){
      if(comparacao((p+i),(p+j)) == 1){
        aux = p[i];
        p[i] = p[j];
        p[j] = aux;
      }
    }
  }
}

int main(void) {
  int i, n;
  float *p, *valor,aux; 
  clock_t funcao_qsort, funcao_ord;

   printf("Quantos números serão ordenados? ");
      scanf("%d", &n);
      p = (float*) malloc( n * (sizeof(float)));
     valor = (float*) malloc(n*(sizeof(float)));
 
  for (int i=0; i<n; i++){
      printf("%d.º numero: ",i+1);
      scanf("%f",&p[i]);
          valor[i] = p[i];
    }
    

  //Para a função qsort()
  funcao_qsort = clock();
  qsort(p, n, sizeof(float), comparacao);
   funcao_qsort = clock() - funcao_qsort;

  
  // O tempo de execução é a diferença entre o tempo de início e tempo de término.

  //Para a minha função 
  funcao_ord = clock();
  ordena(valor, n, comparacao);
  funcao_ord = clock() - funcao_ord;
  
  
  printf("\nFunção qsort():\n\n");
  printf("Os numeros na ordem crescente sao:\n"); // Imprime o vetor da função qsort();
  for(int i = 0; i < n; i++){
    printf("%.2f\n", *(p + i));
  }

  printf("\nFunção Valor:\n\n");
  printf("Os numeros na ordem crescente sao:\n"); // Imprime o vetor da minha função;
  for(int i = 0; i < n; i++){
    printf("%.2f\n", *(valor + i));
  }

  printf("\n\n O tempo de execução da função qsort: %f\n", (((float)funcao_qsort)/CLOCKS_PER_SEC));
  printf("O tempo de execução da função valor: %f\n", (((float)funcao_ord)/CLOCKS_PER_SEC));

  //Na minha máquina, a função "valor" foi 0.000002 milisegundos mais rápida que a função "qsort".
  
  free(valor);
  free(p); //Memória alocada é liberada.
  
  return 0;
}
